
name: Vehicle Booking Rental Pipeline


on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile Project

    env:
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET: ${{ secrets.AWS_SECRET }}
      GG_Client_ID: ${{ secrets.GG_Client_ID }}
      GG_Client_Secret: ${{ secrets.GG_Client_Secret }}


    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Jdk 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Run Unit Test
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET: ${{ secrets.AWS_SECRET }}
          GG_Client_ID: ${{ secrets.GG_Client_ID }}
          GG_Client_Secret: ${{ secrets.GG_Client_Secret }}
        run: mvn clean compile

  unit-test:
    runs-on: ubuntu-latest
    name: Running Unit Test
    services:
     db:
       image: minhquang3010/database_pbl6:1.0
       env:
         MYSQL_ROOT_PASSWORD: admin123
         MYSQL_DATABASE: vehicle_booking_rental
         MYSQL_USER: vehicle_booking_rental
         MYSQL_PASSWORD: vehicle_booking_rental
       ports:
         - 3308:3306
       options: >-
         --health-cmd="mysqladmin ping --silent"
         --health-interval=5s
         --health-timeout=3s
         --health-retries=5
     redis:
       image: redis:latest
       ports:
         - 6380:6379
       options: >-
         --health-cmd="redis-cli ping || exit 1"
         --health-interval=5s
         --health-timeout=3s
         --health-retries=5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Jdk 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Wait for MySQL to be ready
        run: |
         # Chờ MySQL service khởi động hoàn tất
         while ! mysqladmin ping -h "127.0.0.1" --silent; do
           echo "Waiting for MySQL..."
           sleep 5
         done
      - name: Wait for Redis to be ready
        run: |
            # Chờ Redis service khởi động hoàn tất
            while ! redis-cli -h "127.0.0.1" ping | grep PONG > /dev/null; do
              echo "Waiting for Redis..."
              sleep 5
            done
      - name: Run Unit Test
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET: ${{ secrets.AWS_SECRET }}
          GG_Client_ID: ${{ secrets.GG_Client_ID }}
          GG_Client_Secret: ${{ secrets.GG_Client_Secret }}
        run: mvn clean test



  build:
    runs-on: ubuntu-latest
    name: Build Backend
    needs: [compile, unit-test]

    env:
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET: ${{ secrets.AWS_SECRET }}
      GG_Client_ID: ${{ secrets.GG_Client_ID }}
      GG_Client_Secret: ${{ secrets.GG_Client_Secret }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Jdk 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Build Backend
        run: mvn clean compile

  build-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: build

    env:
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET: ${{ secrets.AWS_SECRET }}
      GG_Client_ID: ${{ secrets.GG_Client_ID }}
      GG_Client_Secret: ${{ secrets.GG_Client_Secret }}


    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            minhquang3010/server_backend_pbl6:1.3
            minhquang3010/server_backend_pbl6:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=1.1

